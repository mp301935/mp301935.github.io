import * as THREE from 'three';
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(
    75,
    window.innerWidth / window.innerHeight,
    0.1,
    1000 );

const renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
renderer.setAnimationLoop( animate );

document.body.appendChild( renderer.domElement );

const light = new THREE.AmbientLight(0xFFFFFF, 1);
scene.add(light);

const textureLoader = new THREE.TextureLoader();
const texture = textureLoader.load('image/cat.jpg');
const geometry = new THREE.BoxGeometry( 1, 1, 1 );
const material = new THREE.MeshBasicMaterial( { map: texture } );

const cube = new THREE.Mesh( geometry, material );
cube.position.set(1, 0, 0); scene.add( cube );
camera.position.z = 5; const loader = new GLTFLoader();

loader.load( 'model/cat.glb', function ( gltf ) {
    const model = gltf.scene; model.position.set(-1, 0, 0);
    model.rotation.y = -(Math.PI/2);
    scene.add( gltf.scene ); }, undefined, function ( error ) { console.error( error );
} );

let alpha = 0, beta = 0, gamma = 0;

// Écoute l’orientation du smartphone
window.addEventListener('deviceorientation', (event) => {
    alpha = event.alpha; // rotation autour de l’axe Z (boussole)
    beta = event.beta;   // rotation avant/arrière (X)
    gamma = event.gamma; // rotation gauche/droite (Y)
}, true);

function animate() {
    cube.rotation.x += 0.01;
    cube.rotation.y += 0.01;

    // Utiliser l’orientation pour contrôler la caméra
    camera.rotation.x = beta * (Math.PI / 180);
    camera.rotation.y = gamma * (Math.PI / 180);
    camera.rotation.z = alpha * (Math.PI / 180);

    renderer.render(scene, camera);
}